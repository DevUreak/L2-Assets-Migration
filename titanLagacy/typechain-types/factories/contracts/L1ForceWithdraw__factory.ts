/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  L1ForceWithdraw,
  L1ForceWithdrawInterface,
} from "../../contracts/L1ForceWithdraw";

const _abi = [
  {
    inputs: [],
    name: "doActive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_old",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_new",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "editMigration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_claimer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "generateKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "migrattionClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Type.ClaimParam[]",
        name: "_params",
        type: "tuple[]",
      },
    ],
    name: "migrattionClaimAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
        ],
        internalType: "struct Type.AssetsParam[]",
        name: "_params",
        type: "tuple[]",
      },
    ],
    name: "registry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
        ],
        internalType: "struct Type.AssetsParam[]",
        name: "_params",
        type: "tuple[]",
      },
    ],
    name: "verifyRegistry",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
        ],
        internalType: "struct Type.AssetsParam",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610da6908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631797194714610087578063472bfc921461008257806357490b061461007d5780635f329029146100785780639f03649d14610073578063aaaf7c451461006e5763e41e6c931461006957600080fd5b61046a565b6103f7565b6103a2565b610276565b61019f565b610156565b346100c85760406100a061009a366100cd565b906106aa565b602082519173ffffffffffffffffffffffffffffffffffffffff815116835201516020820152f35b600080fd5b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126100c85760043567ffffffffffffffff928382116100c857806023830112156100c85781600401359384116100c85760248460061b830101116100c8576024019190565b73ffffffffffffffffffffffffffffffffffffffff8116036100c857565b346100c85760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c85761019d60043561019481610138565b60243590610883565b005b346100c85760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c85760206004356101dc81610138565b61023f61026b602435926101ef84610138565b6040519283918683019560443591879190604893917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809260601b16845260601b16601483015260288201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261065a565b519020604051908152f35b346100c85760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c8576044356102b181610138565b33610343576103406102c1610d32565b916000926004358452602052604083207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690556024358352604083209073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b80f35b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920436c6f7365720000000000000000000000000000000000000000006044820152606490fd5b346100c8576103b0366100cd565b60005b8181106103bc57005b806103ed6103ce6103f29385876105af565b356103d881610138565b60206103e58487896105af565b013590610883565b610553565b6103b3565b346100c85760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c85733610343576001610435610d32565b0180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060ff80831615169116179055600080f35b346100c857610478366100cd565b903361034357610486610d32565b9160005b81811061049357005b6104d7906020806104a58386886105af565b013560005285815260409073ffffffffffffffffffffffffffffffffffffffff8260002054166104dc575b5050610553565b61048a565b61054c91876104ec85888a6105af565b35926104f784610138565b80610503878a8c6105af565b0135600052526000209073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b38806104d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105805760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908110156105bf5760061b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761063957604052565b6105ee565b6080810190811067ffffffffffffffff82111761063957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761063957604052565b604051906106a88261061d565b565b906040918251926106ba8461061d565b600092838552836020809601526106cf610d32565b92845b8281106106f05750505050506106e661069b565b9181835282015290565b866106fc8285856105af565b0135865284875273ffffffffffffffffffffffffffffffffffffffff8487205416156107305761072b90610553565b6106d2565b91906107409394509594956105af565b92818436031261076e5750819051926107588461061d565b803561076381610138565b845201359082015290565b80fd5b6040516020810181811067ffffffffffffffff8211176106395760405260008152906000368137565b3d156107f3573d9067ffffffffffffffff821161063957604051916107e760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018461065a565b82523d6000602084013e565b606090565b156107ff57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152fd5b61088b610d32565b604051606083811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116602084019081523390921b166034830152604880830186905282529291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09061090260688261065a565b61094d61093373ffffffffffffffffffffffffffffffffffffffff9687935190208590600052602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b1633811490811591610a9a575b50610a3b57610a00916109d8916040516109c76020820192826109bb8b338b889190604893917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809260601b16845260601b16601483015260288201520190565b0390810183528261065a565b519020600052602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b1680610a2f57506000806106a892610a16610771565b9060208251920190335af1610a2961079a565b506107f8565b906106a8913390610aa3565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420636c61696d65720000000000000000000000000000000000000000006044820152606490fd5b9050153861095a565b9160405191602093848401927fa9059cbb00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8093166024860152604485015260448452610b018461063e565b169060405192610b108461061d565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b15610b8157610b5c939260009283809351925af1610b5661079a565b90610c82565b80519081610b6957505050565b826106a893610b7c938301019101610bdf565b610bf7565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b908160209103126100c8575180151581036100c85790565b15610bfe57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b90919015610c8e575090565b815115610c9e5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110610d1b575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201610cda565b60405160208101907f4c31427269646765466f72636557697468726177000000000000000000000000825260148152610d6a8161061d565b5190209056fea264697066735822122085f2fb474eccf65af3b88c7961b8f55300ab6ff4a7f4f0b5d99cb337bdcbbbb964736f6c63430008140033";

type L1ForceWithdrawConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1ForceWithdrawConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1ForceWithdraw__factory extends ContractFactory {
  constructor(...args: L1ForceWithdrawConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<L1ForceWithdraw> {
    return super.deploy(overrides || {}) as Promise<L1ForceWithdraw>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): L1ForceWithdraw {
    return super.attach(address) as L1ForceWithdraw;
  }
  override connect(signer: Signer): L1ForceWithdraw__factory {
    return super.connect(signer) as L1ForceWithdraw__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1ForceWithdrawInterface {
    return new utils.Interface(_abi) as L1ForceWithdrawInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1ForceWithdraw {
    return new Contract(address, _abi, signerOrProvider) as L1ForceWithdraw;
  }
}
